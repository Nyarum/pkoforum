// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, thread_id, created_at)
VALUES (?, ?, ?) RETURNING id, thread_id, created_at
`

type CreateCommentParams struct {
	ID        string    `json:"id"`
	ThreadID  string    `json:"thread_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.ID, arg.ThreadID, arg.CreatedAt)
	var i Comment
	err := row.Scan(&i.ID, &i.ThreadID, &i.CreatedAt)
	return i, err
}

const createCommentImage = `-- name: CreateCommentImage :one
INSERT INTO comment_images (id, comment_id, filename, filepath, created_at)
VALUES (?, ?, ?, ?, ?) RETURNING id, comment_id, filename, filepath, created_at
`

type CreateCommentImageParams struct {
	ID        string    `json:"id"`
	CommentID string    `json:"comment_id"`
	Filename  string    `json:"filename"`
	Filepath  string    `json:"filepath"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateCommentImage(ctx context.Context, arg CreateCommentImageParams) (CommentImage, error) {
	row := q.db.QueryRowContext(ctx, createCommentImage,
		arg.ID,
		arg.CommentID,
		arg.Filename,
		arg.Filepath,
		arg.CreatedAt,
	)
	var i CommentImage
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.Filename,
		&i.Filepath,
		&i.CreatedAt,
	)
	return i, err
}

const createCommentTranslation = `-- name: CreateCommentTranslation :one
INSERT INTO comment_translations (id, comment_id, language, content)
VALUES (?, ?, ?, ?) RETURNING id, comment_id, language, content
`

type CreateCommentTranslationParams struct {
	ID        string `json:"id"`
	CommentID string `json:"comment_id"`
	Language  string `json:"language"`
	Content   string `json:"content"`
}

func (q *Queries) CreateCommentTranslation(ctx context.Context, arg CreateCommentTranslationParams) (CommentTranslation, error) {
	row := q.db.QueryRowContext(ctx, createCommentTranslation,
		arg.ID,
		arg.CommentID,
		arg.Language,
		arg.Content,
	)
	var i CommentTranslation
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.Language,
		&i.Content,
	)
	return i, err
}

const createThread = `-- name: CreateThread :one
INSERT INTO threads (id, title, content, category, created_at)
VALUES (?, ?, ?, ?, ?) RETURNING id, title, content, category, created_at
`

type CreateThreadParams struct {
	ID        string    `json:"id"`
	Title     string    `json:"title"`
	Content   string    `json:"content"`
	Category  string    `json:"category"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, createThread,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Category,
		arg.CreatedAt,
	)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const getThread = `-- name: GetThread :one
SELECT id, title, content, category, created_at FROM threads WHERE id = ?
`

func (q *Queries) GetThread(ctx context.Context, id string) (Thread, error) {
	row := q.db.QueryRowContext(ctx, getThread, id)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Category,
		&i.CreatedAt,
	)
	return i, err
}

const getThreadComments = `-- name: GetThreadComments :many
SELECT 
    c.id,
    c.thread_id,
    c.created_at,
    ct.content,
    ct.language,
    ci.id as image_id,
    ci.filename,
    ci.filepath
FROM comments c
LEFT JOIN comment_translations ct ON c.id = ct.comment_id
LEFT JOIN comment_images ci ON c.id = ci.comment_id
WHERE c.thread_id = ?
ORDER BY c.created_at ASC
`

type GetThreadCommentsRow struct {
	ID        string         `json:"id"`
	ThreadID  string         `json:"thread_id"`
	CreatedAt time.Time      `json:"created_at"`
	Content   sql.NullString `json:"content"`
	Language  sql.NullString `json:"language"`
	ImageID   sql.NullString `json:"image_id"`
	Filename  sql.NullString `json:"filename"`
	Filepath  sql.NullString `json:"filepath"`
}

func (q *Queries) GetThreadComments(ctx context.Context, threadID string) ([]GetThreadCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getThreadComments, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetThreadCommentsRow{}
	for rows.Next() {
		var i GetThreadCommentsRow
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.CreatedAt,
			&i.Content,
			&i.Language,
			&i.ImageID,
			&i.Filename,
			&i.Filepath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllThreads = `-- name: ListAllThreads :many
SELECT id, title, content, category, created_at FROM threads ORDER BY created_at DESC
`

func (q *Queries) ListAllThreads(ctx context.Context) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, listAllThreads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Thread{}
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listThreads = `-- name: ListThreads :many
SELECT id, title, content, category, created_at FROM threads 
WHERE category = ?1
ORDER BY created_at DESC
`

func (q *Queries) ListThreads(ctx context.Context, category string) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, listThreads, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Thread{}
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Category,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
